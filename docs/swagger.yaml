basePath: /api/v1
definitions:
  common.Auth:
    properties:
      basic:
        $ref: '#/definitions/common.Basic'
        type: object
      bearerToken:
        $ref: '#/definitions/common.BearerToken'
        type: object
    type: object
  common.Basic:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  common.BearerToken:
    properties:
      token:
        type: string
    type: object
  common.ConfluenceServerUserV1:
    properties:
      auth:
        $ref: '#/definitions/common.Auth'
        type: object
      description:
        type: string
    type: object
  common.GrafanaDashBoard:
    properties:
      excludePanelsIDs:
        description: blank means exclude nothing. New panels will be automatically included
        items:
          type: integer
        type: array
      host:
        type: string
      includePanelsIDs:
        description: blank means include all panels. Will include newly added panels
        items:
          type: integer
        type: array
      port:
        type: integer
      uid:
        type: string
      user:
        $ref: '#/definitions/common.GrafanaUserV1'
        type: object
    type: object
  common.GrafanaUserV1:
    properties:
      auth:
        $ref: '#/definitions/common.Auth'
        type: object
      description:
        type: string
    type: object
  credentials.CheckCredentialsV1:
    properties:
      ConfluenceServerUsers:
        items:
          $ref: '#/definitions/credentials.CheckUserV1'
        type: array
      GrafanaAPIUsers:
        items:
          $ref: '#/definitions/credentials.CheckUserV1'
        type: array
    type: object
  credentials.CheckUserResultV1:
    properties:
      Cause:
        type: string
      auth:
        $ref: '#/definitions/common.Auth'
        type: object
      host:
        type: string
      port:
        type: integer
      result:
        type: boolean
    type: object
  credentials.CheckUserV1:
    properties:
      auth:
        $ref: '#/definitions/common.Auth'
        type: object
      host:
        type: string
      port:
        type: integer
    type: object
  credentials.CheckUsersResultV1:
    properties:
      confluenceServerUserCheck:
        items:
          $ref: '#/definitions/credentials.CheckUserResultV1'
        type: array
      grafanaReadUserCheck:
        items:
          $ref: '#/definitions/credentials.CheckUserResultV1'
        type: array
    type: object
  credentials.SetCredentialsV1:
    properties:
      ConfluenceServerUsers:
        additionalProperties:
          $ref: '#/definitions/common.ConfluenceServerUserV1'
        type: object
      GrafanaAPIUsers:
        additionalProperties:
          $ref: '#/definitions/common.GrafanaUserV1'
        type: object
    type: object
  health.Ping:
    properties:
      response:
        example: hello
        type: string
    type: object
  record.AccountViewV1:
    properties:
      Alias:
        description: Optional arg. Won't be returned if missing.
        type: string
      Email:
        type: string
    type: object
  record.ConfluenceServerUser:
    properties:
      auth:
        $ref: '#/definitions/common.Auth'
        type: object
      description:
        type: string
    type: object
  record.CredentialsView1:
    properties:
      ConfluenceServerUser:
        additionalProperties:
          $ref: '#/definitions/record.ConfluenceServerUser'
        type: object
      GrafanaAPIUsers:
        additionalProperties:
          $ref: '#/definitions/record.GrafanaAPIUser'
        type: object
    type: object
  record.GrafanaAPIUser:
    properties:
      auth:
        $ref: '#/definitions/common.Auth'
        type: object
      description:
        type: string
    type: object
  record.MetadataViewV1:
    properties:
      CreateTimeUTC:
        type: string
      LastUpdate:
        type: string
      PrimaryKey:
        type: string
      Version:
        type: string
    type: object
  record.RecordViewV1:
    properties:
      Account:
        $ref: '#/definitions/record.AccountViewV1'
        type: object
      Credentials:
        $ref: '#/definitions/record.CredentialsView1'
        type: object
      Metadata:
        $ref: '#/definitions/record.MetadataViewV1'
        type: object
    type: object
  report.CheckV1ReportView:
    properties:
      duration:
        type: string
      endTime:
        type: string
      grafanaDBReports:
        additionalProperties:
          $ref: '#/definitions/report.GrafanaDashboardReportView'
        type: object
      startTime:
        type: string
      title:
        type: string
    type: object
  report.ConfluenceStoreStagesView:
    properties:
      createMissingParentPage:
        $ref: '#/definitions/report.Result'
        type: object
      dataStorePageCreation:
        $ref: '#/definitions/report.Result'
        type: object
      parentPageExistsCheck:
        $ref: '#/definitions/report.Result'
        type: object
      uploadSnapshots:
        $ref: '#/definitions/report.Result'
        type: object
    type: object
  report.GrafanaDashboardReportView:
    properties:
      endTime:
        type: string
      stages:
        $ref: '#/definitions/report.GrafanaStagesView'
        type: object
      startTime:
        type: string
      title:
        type: string
      uid:
        type: string
    type: object
  report.GrafanaSnapshotStagesView:
    properties:
      basicUILogin:
        $ref: '#/definitions/report.Result'
        type: object
      createDownloadDir:
        $ref: '#/definitions/report.Result'
        type: object
      dashboardExistsCheck:
        $ref: '#/definitions/report.Result'
        type: object
      dashboardSnapshot:
        $ref: '#/definitions/report.Result'
        type: object
      deleteDownloadDir:
        $ref: '#/definitions/report.Result'
        type: object
      deleteSnapshot:
        $ref: '#/definitions/report.Result'
        description: Cleanup stages
        type: object
      extractPanelID:
        $ref: '#/definitions/report.Result'
        type: object
      panelSnapshotDownload:
        additionalProperties:
          $ref: '#/definitions/report.PanelDownloadView'
        type: object
    type: object
  report.GrafanaStagesView:
    properties:
      confluenceStoreStages:
        additionalProperties:
          $ref: '#/definitions/report.ConfluenceStoreStagesView'
        type: object
      grafanaSnapshotStages:
        $ref: '#/definitions/report.GrafanaSnapshotStagesView'
        type: object
    type: object
  report.PanelDownloadView:
    properties:
      createTempFile:
        $ref: '#/definitions/report.Result'
        type: object
      downloadPanelScreenshot:
        $ref: '#/definitions/report.Result'
        type: object
    type: object
  report.Result:
    properties:
      cause:
        type: string
      result:
        type: boolean
    type: object
  schedule.CheckScheduleV1:
    properties:
      dataStores:
        $ref: '#/definitions/schedule.DataStores'
        type: object
      graphDashboards:
        $ref: '#/definitions/schedule.DashBoards'
        type: object
    type: object
  schedule.DashBoards:
    properties:
      grafana:
        additionalProperties:
          $ref: '#/definitions/common.GrafanaDashBoard'
        type: object
    type: object
  schedule.DataStores:
    properties:
      confluencePages:
        additionalProperties:
          $ref: '#/definitions/schedule.ParentConfluencePage'
        type: object
    type: object
  schedule.ParentConfluencePage:
    properties:
      host:
        type: string
      parentPageID:
        type: string
      port:
        type: integer
      spaceKey:
        type: string
      user:
        $ref: '#/definitions/common.Basic'
        type: object
    type: object
info:
  contact: {}
  description: Takes and updates snapshots from a graph service to a document store
  license:
    name: MIT License
  title: Graph Snapper API
  version: "1.0"
paths:
  /account/:id/credentials:
    put:
      description: Non-authenticated endpoint that adds grafana and confluence-server users to an account. Assumes entries are pre-validated
      parameters:
      - description: Add credentials
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/credentials.SetCredentialsV1'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/credentials.SetCredentialsV1'
      summary: Add credentials to an account
      tags:
      - account
  /account/{id}:
    get:
      description: Non-authenticated endpoint fetches account at specified key
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/record.RecordViewV1'
      summary: Get account record
      tags:
      - account
    put:
      description: Non-authenticated endpoint creates an empty record at the specified key. Overwrites any record that already exists
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: Create account
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/record.AccountViewV1'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Create account record
      tags:
      - account
  /credentials/check:
    post:
      description: Non-authenticated endpoint Check credentials for validity. Returns an array of user objects with check result
      parameters:
      - description: Check credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/credentials.CheckCredentialsV1'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/credentials.CheckUsersResultV1'
      summary: Check credentials for validity
      tags:
      - credentials
  /health/hello:
    get:
      description: Non-authenticated endpoint that returns 200 with hello message. Used to validate that the service is responsive.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/health.Ping'
      summary: Hello sanity endpoint
      tags:
      - health
  /schedule/check:
    post:
      description: Non-authenticated endpoint which checks and runs a schedule to validate connectivity and storage behaviour by the end user
      parameters:
      - description: Check schedule
        in: body
        name: schedule
        required: true
        schema:
          $ref: '#/definitions/schedule.CheckScheduleV1'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/report.CheckV1ReportView'
      summary: Check and execute schedule
      tags:
      - schedule
swagger: "2.0"
